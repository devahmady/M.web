public function profile()
    {
        $ip = session()->get('ip');
        $user = session()->get('user');
        $password = session()->get('password');
        $API = new MikrotikApi();
        $API->debug = false;

        if ($API->connect($ip, $user, $password)) {
            $hotspotuser = $API->comm('/ip/hotspot/user/print');
            $server = $API->comm('/ip/hotspot/print');
            $pools = $API->comm('/ip/pool/print');
            $parentq = $API->comm('/queue/simple/print');
            $profile = $API->comm('/ip/hotspot/user/profile/print');

            $data = [
                'totalhotspotuser' => count($hotspotuser),
                'jumon' => count($profile),
                'hotspotuser' => $hotspotuser,
                'server' => $server,
                'profile' => $profile,
                'pool' => $pools,
                'parentq' => $parentq,
            ];
            $addressPools = $this->getAddressPools();
            $API->disconnect(); // pastikan untuk disconnect setelah selesai menggunakan API

            return view('hotspot.profile', $data)->with('addressPools', $addressPools);
        } else {
            return redirect('failed');
        }
    }


    public function addProfile(Request $request)
    {
        $ip = session()->get('ip');
        $user = session()->get('user');
        $password = session()->get('password');
        $API = new MikrotikApi();
        $API->debug = true;
        if ($API->connect($ip, $user, $password)) {
            $addressPools = $this->getAddressPools($API);
    
            $name = $request->input('name');
            $rateLimit = $request->input('rate-limit');
            $sharedUsers = $request->input('shared-users');
            $expmode = $request->input('expmode');
            $validity = $request->input('validity');
            $graceperiod = $request->input('graceperiod');
            $pool = $request->input('ppool');
            $parentq = $request->input('parentqq');
            $getprice = $request->input('price');
    
            $price = ($getprice == "") ? "0" : $getprice;
    
            $getlock = $request->input('lockunlock');
            $lock = ($getlock == 'Enable') ? ';[:local mac $"mac-address"; /ip hotspot user set mac-address=$mac [find where name=$user]]' : '';
    
            $onlogin1 = ':put (",rem,' . $price . ',' . $validity . ',' . $graceperiod . ',,' . $getlock . ',"); {:local date [/system clock get date ];:local time [/system clock get time ];:local uptime (' . $validity . ');[/system scheduler add disabled=no interval=' . $validity . ' name=$user on-event="[/ip hotspot active remove [find where user=$user]];[/ip hotspot user set limit-uptime=1s [find where name=$user]];[/sys sch re [find where name=$user]];[/sys script run [find where name=$user]];[/sys script re [find where name=$user]]" start-date=$date start-time=$time];[/system script add name=$user source=":local date [/system clock get date ];:local time [/system clock get time ];:local uptime (' . $graceperiod . ');[/system scheduler add disabled=no interval=' . $validity . ' name=$user on-event= \"[/ip hotspot user remove [find where name=$user]];[/ip hotspot active remove [find where user=$user]];[/sys sch re [find where name=$user]]\"]"]';
            $onlogin2 = ':put (",ntf,' . $price . ',' . $validity . ',,,' . $getlock . ',"); {:local date [/system clock get date ];:local time [/system clock get time ];:local uptime (' . $validity . ');[/system scheduler add disabled=no interval=' . $validity . ' name=$user on-event= "[/ip hotspot user set limit-uptime=1s [find where name=$user]];[/ip hotspot active remove [find where user=$user]];[/sys sch re [find where name=$user]]" start-date=$date start-time=$time]';
            $onlogin3 = ':put (",remc,' . $price . ',' . $validity . ',' . $graceperiod . ',,' . $getlock . ',"); {:local price (' . $price . ');:local date [/system clock get date ];:local time [/system clock get time ];:local uptime (' . $validity . ');[/system scheduler add disabled=no interval=' . $validity . ' name=$user on-event="[/ip hotspot active remove [find where user=$user]];[/ip hotspot user set limit-uptime=1s [find where name=$user]];[/sys sch re [find where name=$user]];[/sys script run [find where name=$user]];[/sys script re [find where name=$user]]" start-date=$date start-time=$time];[/system script add name=$user source=":local date [/system clock get date ];:local time [/system clock get time ];:local uptime (' . $graceperiod . ');[/system scheduler add disabled=no interval=' . $validity . ' name=$user on-event= \"[/ip hotspot user remove [find where name=$user]];[/ip hotspot active remove [find where user=$user]];[/sys sch re [find where name=$user]]\"]"];:local bln [:pick $date 0 3]; :local thn [:pick $date 7 11];[:local mac $"mac-address"; /system script add name="$date-|-$time-|-$user-|-$price-|-$address-|-$mac-|-' . $validity . '" owner="$bln$thn" source=$date comment=mikhmon]';
            $onlogin4 = ':put (",ntfc,' . $price . ',' . $validity . ',,,' . $getlock . ',"); {:local price (' . $price . ');:local date [/system clock get date ];:local time [/system clock get time ];:local uptime (' . $validity . ');[/system scheduler add disabled=no interval=' . $validity . ' name=$user on-event= "[/ip hotspot user set limit-uptime=1s [find where name=$user]];[/ip hotspot active remove [find where user=$user]];[/sys sch re [find where name=$user]]" start-date=$date start-time=$time];:local bln [:pick $date 0 3]; :local thn [:pick $date 7 11];[:local mac $"mac-address"; /system script add name="$date-|-$time-|-$user-|-$price-|-$address-|-$mac-|-' . $validity . '" owner="$bln$thn" source=$date comment=mikhmon]';
    
            $onlogin = '';
    
            if ($expmode == "rem") {
                $onlogin = $onlogin1 . $lock . "}}";
            } elseif ($expmode == "ntf") {
                $onlogin = $onlogin2 . $lock . "}}";
            } elseif ($expmode == "remc") {
                $onlogin = $onlogin3 . $lock . "}}";
            } elseif ($expmode == "ntfc") {
                $onlogin = $onlogin4 . $lock . "}}";
            } elseif ($expmode == "0" && $price != "") {
                $onlogin = ':put (",,' . $price . ',,,noexp,' . $getlock . ',")' . $lock;
            }
            // Tambahkan profil
            $add = $API->comm("/ip/hotspot/user/profile/add", [
                "name" => $name,
                "on-login" => $onlogin,
                "address-pool" => $pool,
                "rate-limit" => $rateLimit,
                "shared-users" => $sharedUsers,
                "session-timeout" => $validity,
                "parent-queue" => $parentq,
                // Tambahkan parameter lain sesuai kebutuhan
            ]);
    
            // Eksekusi perintah "on-login" script
            $API->comm($onlogin);
    
            // Ambil informasi profil setelah ditambahkan
            $getProfile = $API->comm("/ip/hotspot/user/profile/print", [
                "?name" => $name,
            ]);
           // Cek apakah ada pesan kesalahan
        if (!empty($add['!trap'][0]['message'])) {
            $message = $add['!trap'][0]['message'];
            $response = [
                "message" => "error",
                "data" => ["error" => $message]
            ];
            return response()->json($response, JsonResponse::HTTP_OK);
        }
            // Respons JSON dengan informasi profil
            // return response()->json($result);
    
            // Redirect ke halaman profil
            return redirect('hotspot/profile');
        } else {
            return redirect('failed');
        }
    }